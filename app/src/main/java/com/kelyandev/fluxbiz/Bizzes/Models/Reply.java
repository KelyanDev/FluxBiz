package com.kelyandev.fluxbiz.Bizzes.Models;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

public class Reply {
    private String id, content, author, userId, replyTo, parentId;
    private long time;
    private int likes, rebizzes, replies;
    private double score;

    public Reply() {
    }

    /**
     * Create a reply object with specified details
     * @param id The unique identifier for the reply (generated by Firestore)
     * @param content The content of the reply
     * @param time The creation time of the reply
     * @param author The author of the reply
     * @param likes The like count of the reply
     * @param rebizzes The rebiz count of the reply
     * @param replies The reply count of the reply
     * @param userId the author user's Id
     * @param replyTo The username of the original Biz's author
     * @param parentId The ID of the reply's parent
     */
    public Reply(String id, String content, long time, String author, int likes, int rebizzes, int replies, String userId, String replyTo, String parentId) {
        this.id = id;
        this.content = content;
        this.time = time;
        this.author = author;
        this.likes = likes;
        this.rebizzes = rebizzes;
        this.replies = replies;
        this.userId = userId;
        this.replyTo = replyTo;
        this.parentId = parentId;
    }

    /**
     * Gets the id of the reply
     * @return Reply's ID
     */
    public String getId() {
        return this.id;
    }

    /**
     * Sets the id of the reply
     * @param id The new reply's id
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the content of the reply
     * @return The reply's content
     */
    public String getContent() {
        return content;
    }

    /**
     * Sets the content of the reply
     * @param content The new reply's content
     */
    public void setContent(String content) {
        this.content = content;
    }

    /**
     * Gets the author of the reply
     * @return The reply's author
     */
    public String getAuthor() {
        return author;
    }

    /**
     * Sets the reply's author
     * @param author The new reply's author
     */
    public void setAuthor(String author) {
        this.author = author;
    }

    /**
     * Gets the author user's ID
     * @return The author user's ID
     */
    public String getUserId() {
        return userId;
    }

    /**
     * Sets the author user's ID
     * @param userId The new author's ID
     */
    public void setUserId(String userId) {
        this.userId = userId;
    }

    /**
     * Gets the creation time of the reply
     * @return The time of the reply
     */
    public long getTime() {
        return time;
    }

    /**
     * Sets the time of the reply
     * @param time The new time of the reply
     */
    public void setTime(long time) {
        this.time = time;
    }

    /**
     * Gets the number of likes a reply has
     * @return The likes count
     */
    public int getLikes() {
        return likes;
    }

    /**
     * Sets the number of likes a reply has
     * @param likes The new like count
     */
    public void setLikes(int likes) {
        this.likes = likes;
    }

    /**
     * Gets the number of rebizzes a reply has
     * @return The rebiz count
     */
    public int getRebizzes() {
        return rebizzes;
    }

    /**
     * Sets the number of rebizzes a reply has
     * @param rebizzes The new rebiz count
     */
    public void setRebizzes(int rebizzes) {
        this.rebizzes = rebizzes;
    }

    /**
     * Gets the number of replies a reply has
     * @return The reply count
     */
    public int getReplies() {
        return replies;
    }

    /**
     * Sets the number of replies a reply has
     * @param replies The new reply count
     */
    public void setReplies(int replies) {
        this.replies = replies;
    }

    /**
     * Gets the score of the reply
     * @return The reply's score
     */
    public double getScore() {
        return score;
    }

    /**
     * Sets the score of the reply
     * @param score The new reply's
     */
    public void setScore(double score) {
        this.score = score;
    }

    /**
     * Increments the like count of the reply
     */
    public void incrementLikes() {
        likes++;
    }

    /**
     * Decrements the like count of the reply
     */
    public void decrementLikes() {
        if (likes > 0) {
            likes--;
        }
    }

    /**
     * Increments the rebiz count of the reply
     */
    public void incrementRebizzes() {
        rebizzes++;
    }

    /**
     * Decrements the rebiz count of the reply
     */
    public void decrementRebizzes() {
        if (rebizzes > 0) {
            rebizzes--;
        }
    }

    /**
     * Gets the username of the message's author this reply is replying to
     * @return The original author's username
     */
    public String getReplyTo() {
        return replyTo;
    }

    /**
     * Sets the username of the original message's author this reply is replying to
     * @param username The new username
     */
    public void setReplyTo(String username) {
        this.replyTo = username;
    }

    /**
     * Gets the reply's parent ID
     * @return The parent's id
     */
    public String getParentId() {
        return parentId;
    }

    /**
     * Sets the parent ID of the reply
     * @param parentId The new parents id
     */
    public void setParentId(String parentId) {
        this.parentId = parentId;
    }

    /**
     * Calculates a score for the Reply, based on its age, its like count & and its rebiz count
     * This is used to rank Replies by actuality over time
     */
    public void calculateScore() {
        long currentTime = System.currentTimeMillis();
        long ageInMillis = currentTime - time;

        // Hyperparameters
        double beta = 0.9; // Likes weight
        double alpha = 1.2; // Rebizzes weight
        double delta = 1.4; // Decreasing linked to age
        double epsilon = 1e-6;

        // Calculating likes and rebizzes contribution
        double likesContribution = Math.pow(likes, beta);
        double rebizzesContribution = Math.pow(rebizzes, alpha);

        // Total popularity score
        double popularity = likesContribution + rebizzesContribution;

        // Calculating penalty (related to age)
        double agePenalty = Math.pow(ageInMillis / 1000.0, delta) + epsilon;

        setScore(popularity/agePenalty);
    }

    /**
     * Formats and returns the creation time of the Reply relative to the current time
     * @return A formatted string representing the age of the Biz
     */
    public String getFormattedDate() {
        long currentTime = System.currentTimeMillis();
        long ageInMillis = currentTime - time;

        long ageInSec = TimeUnit.MILLISECONDS.toSeconds(ageInMillis);
        long ageInMinutes = TimeUnit.MILLISECONDS.toMinutes(ageInMillis);
        long ageInHours = TimeUnit.MILLISECONDS.toHours(ageInMillis);
        long ageInDays = TimeUnit.MILLISECONDS.toDays(ageInMillis);

        if (ageInSec < 60) {
            return ageInSec + "sec";
        } else if (ageInMinutes < 60) {
            return ageInMinutes + "min";
        } else if (ageInHours < 24) {
            return ageInHours + "h";
        } else if (ageInDays < 30){
            return ageInDays + "d";
        } else {
            Date date = new Date(time);
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            return sdf.format(date);
        }
    }
}
